using System;
using System.Collections.Generic;
using System.Text;
using System.IO;

namespace u_doit.I_DoIt.ClassBuilder
{
    class CSharpSourceWriter : ClassBuilder
    {
        public CSharpSourceWriter(string id, string displayName)
            : base(id,displayName)
        {
            ms = new MemoryStream();
            sw = new StreamWriter(ms, Encoding.UTF8);

            sw.WriteLine("//Generated by the u-doit class generator, written by feyris-tan.");
            sw.WriteLine("using u_doit.I_DoIt;");
            sw.WriteLine("using System;");
            sw.WriteLine("using u_doit.I_DoIt.Objects;");
            sw.WriteLine("using Newtonsoft.Json;");
            sw.WriteLine("using u_doit.I_DoIt.Objects;");
            sw.WriteLine();
            sw.WriteLine("namespace u_doit.Objects.{0}", isCategory ? "Categories" : "Objects");
            sw.WriteLine("{");
            sw.WriteLine("\t[CategoryId(\"{0}\")]",id);
            sw.WriteLine("\t[CategoryDisplayName(\"{0}\")]", displayName);
            sw.WriteLine("\tclass {0} : Category", recommendedClassName);
            sw.WriteLine("\t{");
        }

        public override void Finalize()
        {
            if (isFinalized) return;

            sw.WriteLine("\t}");
            sw.WriteLine("}");
            isFinalized = true;
        }

        MemoryStream ms;
        StreamWriter sw;

        public override void AddField(string name,DialogFieldInfo fi)
        {
            if (fi.IsEnum)
            {
                sw.WriteLine("\t\t[JsonConverter(typeof(EnumDeserializer))]");
            }
            else if (fi.IsFloat)
            {
                sw.WriteLine("\t\t[JsonConverter(typeof(FloatDeserializer))]");
            }

            if (name.Equals("object")) name = "@" + name;
            sw.WriteLine("\t\tpublic {1} {0};", name, GetDataType(fi));
        }



        public void SaveTo(string filename)
        {
            if (!isFinalized)
            {
                throw new Exception("class builder noch nicht finalisiert.");
            }

            FileInfo fi = new FileInfo(filename);
            if (!fi.Directory.Exists) fi.Directory.Create();
            if (fi.Exists) fi.Delete();

            sw.Flush();
            int length = (int)ms.Position;
            ms.Position = 0;
            byte[] buffer = new byte[length];
            ms.Read(buffer, 0, length);

            FileStream fs = fi.OpenWrite();
            fs.Write(buffer, 0, length);
            fs.Flush();
            fs.Close();
            
        }

        public string RecommendedFileName
        {
            get { return string.Format("{0}\\{1}.cs", isCategory ? "Categories" : "Objects", recommendedClassName); }
        }

        public override void Dispose()
        {
            sw.Dispose();
            ms.Dispose();
        }

        public void GenEnum(string name, List<EnumInfo> di,TextWriter sw)
        {
            if (this.id.Equals("C__CATS__PERSON"))
            {

            }
            if (string.IsNullOrEmpty(name)) return;

            sw.WriteLine("");
            sw.WriteLine("\t\tpublic enum {0} : int", name);
            sw.WriteLine("\t\t{");

            bool nameDoubles = false;
            EnumInfo firstEnumInfo = null;
            if (di.Count > 0)
            {
                firstEnumInfo = di[0];
            }
            if (di.Count > 1)
            {
                if (di[0].@const.Equals(di[1].@const))
                    nameDoubles = true;
            }
            foreach (EnumInfo ei in di)
            {
                string titleToWrite = "";
                if (ei.@const.Equals("0"))
                {
                    titleToWrite = ei.title;
                }
                else if (!string.IsNullOrEmpty(ei.@const) && nameDoubles)
                {
                    titleToWrite = ei.title;
                }
                else if (!string.IsNullOrEmpty(ei.@const))
                {
                    titleToWrite = ei.@const;
                    if (!ei.Equals(firstEnumInfo))
                    {
                        if (ei.@const.Equals(firstEnumInfo.@const))
                        {
                            titleToWrite = ei.title;
                        }
                    }
                }
                else if (!string.IsNullOrEmpty(ei.title))
                {
                    titleToWrite = ei.title;
                }
                else
                {
                    throw new Exception("what?");
                }

                titleToWrite = titleToWrite.Replace("-", "");
                if (char.IsDigit(titleToWrite[0]))
                {
                    titleToWrite = "_" + titleToWrite;
                }
                titleToWrite = titleToWrite.Replace(' ', '_');
                titleToWrite = titleToWrite.Replace("/", "or");
                if (titleToWrite.Equals("object"))
                    titleToWrite = "@" + titleToWrite;

                sw.WriteLine("\t\t\t{0} = {1},", titleToWrite, ei.id);
            }

            sw.WriteLine("\t\t}");
            sw.WriteLine("");
        }

        public override void AddEnum(string name, List<EnumInfo> di)
        {
            GenEnum(name, di, this.sw);
        }
    }
}
